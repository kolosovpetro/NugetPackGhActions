name: Run Build and Test

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

env:
  Configuration: 'Release'
  ProjectPath: './MyNugetPackage/MyNugetPackage.csproj'
  TestProjectPath: './MyNugetPackage.Tests/MyNugetPackage.Tests.csproj'
  ArtifactFolder: './artifacts'
  NugetFeed: 'https://nuget.pkg.github.com/kolosovpetro/index.json'
  Username: 'kolosovpetro'
  ApiKey: ${{ secrets.NUGET_API_KEY }}

jobs:
  build-and-test-dotnet:
    name: Run Build and Test .NET
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncomittedChanges: ${{ steps.gitversion.outputs.uncomittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Setup .NET 6.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore Nuget Packages
        run: dotnet restore

      - name: Build .NET Solution
        run: |
          dotnet build --no-restore /p:ContinuousIntegrationBuild=true --configuration $Configuration

      - name: Run Unit Tests
        run: |
          dotnet test ${{ env.TestProjectPath }} --no-restore --verbosity normal

      - name: Dotnet Pack
        run: |
          echo "VERSION IS: $PACKAGE_VERSION"
          dotnet pack "${{ env.ProjectPath }}" --output "${{ env.ArtifactFolder }}" --configuration "$Configuration" -p:Version="$PACKAGE_VERSION"
        env:
          PACKAGE_VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: 'nupkg'
          path: '${{ env.ArtifactFolder }}/*.nupkg'

  publish:
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: 'nupkg'

      - name: Setup .NET 6.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: add package source
        run: |
          dotnet nuget add source $NugetFeed -n github -u $Username -p $ApiKey --store-password-in-clear-text

      - name: publish
        run: |
          dotnet nuget push ./nupkg/**.nupkg --source github --api-key $ApiKey